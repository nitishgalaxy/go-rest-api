Why Go:

1. Multi-threaded by default 
2. Strongly typed, compiled - few errors and faster development time 
3. Built-in JSON support 
4. Extensive native testing framework
5. Self-contained, portable, cross-platform 
6. Simple and easy to understand 



API Outline
----------------

1. Resource - A list of users 
2. List item data - name, role, id 
3. Fuctionality - Create, Read, Update, Delete [CRUD]
4. Endpoints:
        i. Collections:  /users 
        ii. Item:  /users/{id}
5. Data format - JSON 




1. Create an Item:
-----------------

Method - POST
Target - Collection
Endpoint - POST /users
Request Content - full item data 
Successful response - 201 created + location 


2. Access the collection:
-----------------

Method - GET
Target - Collection
Endpoint - GET /users
Request Content - none
Successful response - 200 OK + list of users 


3. Access an item:
-----------------

Method - GET
Target - Item
Endpoint - GET /users/{id}
Request Content - none
Successful response - 200 OK + user data 
Missing resource - 404 not found 



4. Replace an item:
-----------------

Method - PUT
Target - Item
Endpoint - PUT /users/{id}
Request Content - full item data
Successful response - 200 OK + new item data 
Missing resource - 404 not found 




5. Update an item:
-----------------

Method - PATCH
Target - Item
Endpoint - PATCH /users/{id}
Request Content - partial item data
Successful response - 200 OK + new item data 
Missing resource - 404 not found 




6. Delete an item:
-----------------

Method - DELETE
Target - Item
Endpoint - DELETE /users/{id}
Request Content - none
Successful response - 200 OK (sometimes 204 No Data)
Missing resource - 404 not found 



7. Typical Responses 
-----------------

i. Malformed Requests - 400 bad requests 

ii. Execution Errors - 500 internal server error 

iii. Invalid  Method - 405 method not allowed 

iv. Missing Resources - 404 not found 




Setting Up Data Store 
----------------------------------

BoltDB - Simple storage for Go


Storm Library 


go get github.com/asdine/storm
    - Interact with BoltDB

go get gopkg.in/mgo.v2/bson
    - Handle UID for our records




type User struct {
	ID   bson.ObjectId `json:"id" storm:"id"`
	Name string        `json:"name"`
	Role string        `json:"role"`
}


ID   bson.ObjectId `json:"id" storm:"id"`  
    -   We can use multiple Tags
    -   Tag for storm was optional here but its good to explicitly mention the Primary Key of DB. 



-----------------------------------------------------


go mod init github.com/nitishgalaxy/go-rest-api 

go get github.com/asdine/storm

go get gopkg.in/mgo.v2/bson

go run *.go




Note:-

http://localhost:8080/users   - Works
http://localhost:8080/users/  - gives Asset not found


Solution:

http.HandleFunc("/users", handlers.UsersRouter)
http.HandleFunc("/users/", handlers.UsersRouter)



Note: Route ending with '/' is discouraged in REST API as that creates ambiguity.



------------------------------------------------

Retreiving a List (Get Request)

Responses:
    1. 200 OK + A list of items in collection
    2. 404 not found 
    3. 500 internal server error


Response Content:

Body:

[
    {
        "name":"Tom",
        "role":"Manager"
    },
    {
        "name":"Max",
        "role":"Lead"
    }
]





Different ways to update a record:

1. By assignment and duplication

recordItem, err := Update(data, recordItem) (*recordItem, error)


2. By reference (using pointer)

err := Update(data, *recordItem) error 

    - Passing a pointer uses less memory and is faster




------------------------------------------------


Retrieving an Item (GET request)

Method - GET
Target - An item 
Request - No content 
Result - No effect

Responses:
    i. 200 OK + existing resource 
    ii. 404 not found
    iii. 500 internal server error


 
------------------------------------------------

Replacing an Item (PUT)


Method - PUT
Target - An item 
Request - Full item content 
Result - Resource is replaced with the request body

Responses:
    i. 200 OK + updated resource 
    ii. 404 not found
    iii. 500 internal server error
    iv. 400 bad request




------------------------------------------------

Updating an Item (PATCH)


Method - PATCH
Target - An item 
Request - Partial item content 
Result - Resource is updated based on fields existing in the request.

Responses:
    i. 200 OK + updated resource 
    ii. 404 not found
    iii. 500 internal server error
    iv. 400 bad request


------------------------------------------------

Deleting an Item (DELETE)


Method - DELETE
Target - An item 
Request - No content 
Result - Resource is removed.

Responses:
    i. 200 OK (sometimes 204 no content)
    ii. 404 not found
    iii. 500 internal server error



------------------------------------------------

Retreiving headers (HEAD)

- Optional to implement 
- Similar Fuctionality as GET, but without sending BODY.



Method - HEAD
Target - any resource
Request - No content 
Result - No effect

Responses:
    i. 200 OK + headers from GET Method 
    ii. 404 not found
    iii. 500 internal server error


- Instead of downloading a bulky response, if you only want to confirm if a resource exists,
  you can use a HEAD request.

- HEAD saves you time and bandwidth



------------------------------------------------------------------------------------

TESTING 

Types of Testing:

1. Unit Tests 
    i. Test smallest elements of code (usually functions)
    ii. Useful for early bug fixing and during code maintenance 
    iii. Can provide use cases and examples for developers.


2. End-to-end tests:
    i. Test the program as a whole 
    ii. Treat the program as black box 
    iii. Good for QA 



Which Tests are good:

1. Meaningful 
    i. Test actual use cases of functions 
    ii. Test against valid and invalid input 
    iii. Examine output and expected state changes

2. Comprehensive 
    i. Explore as many code pathways as possible.

3. Metric
    i. Code Coverage - the percentage of code traversed during tests 
    ii. Strive for 100%, but only 80-90% is usually attainable.


Unit Tests in Go:

    - Test code is contained in xxxx_test.go 
    - Test code is not included in the build.
    - Test code cannot be shared between packages.

    i. Implementation

        func TestXxxx (t *Testing.t) {

        }



Run all tests in project
> go test ./...


Run tests with coverage:
> go test -coverprofile cp.out ./...




// Adding content of request body...
// We cannot pass string

            r:   &http.Request{
				Body: ioutil.NopCloser(bytes.NewBufferString("{}"))
			},

1. Send JSON string to byte buffer... which implements the Reader interface
2. Convert Reader to ReadCloser by passing output of 1 to ioutil.NopCloser

- Packages io, ioutil and bytes are very important to get familiar with.





------------------------------------

Minimum Viable Unit Test 

1. Simple Tests 
2. Doesnt cover edge cases 
3. Focus on working, valid code and usage 
4. Better than no tests [it is not comprehensive]




Test Setup and Teardown

func TestMain(m *testing.M) {
	m.Run() // Execute all tests for given package
	os.Remove(dbpath)
}



------------------------------------

Benchmarking 

-   Benchmarks are specialized tests 

-   Benchmarks focus on performance 

-   Runs on demand 


-   Implementation

    func BenchmarkXxxx (b *testing.B){
        // Loop: 
        // N is automatically calculated
        // and loop is run enough times for results to be reliable.
        for i := 0; i < b.N; i++ {

        } 
    }



> go test -bench ./...

- Code in TestMain is also executed during Benchmark tests.



1. Start by copyting Unit Tests and putting them in a loop.
2. Remove logging (t.Log)
3. Change t. to b.






Caching 
-------------------

- Usually HEAD and GET requests are cached.

- POST, PUT, PATCH and DELETE will invalidate cache when content changes.

- Pre-emptively store data on change.

- Provide an optional un-cached path for testing.

- Reduce your cache footprint by time or size expiration.



Creating a Custom Writer
--------------------------------------

Interfaces in Go
-------------------

    -   http.ResponseWriter is an interface

    -   Interfaces are defined by their member fuunctions 

    -   Any type that has the same member functions implements a given interface.

    -   We can create a structure that can supplant http.ResponseWriter




Testing using Mockups 
--------------------------

1. Mimick other code 

2. Only contain the code useful for tests 

3. Remove lags

4. Do not depend on the testing environment 



Bechmarking Cached Code 
-------------------------------

> go test -bench .





FRAMEWORKS and MIDDLEWARES 
-------------------------------

Echo Framework


Gorilla  - large and not very performant 

httprouter - a very fast router 

Gin - quick and extensible 

Echo - light and quickest out there 


go mod init github.com/nitishgalaxy/go-rest-api-echo 

go get github.com/labstack/echo



-------------------------------

Middleware:


- A middleware is a piece of functionality between the request and response.

A sample middleware chain:-

1. Request 
    ->
2. Middleware 1 [logger]
    ->
3. Middleware 2 [auth]
    ->
4. Router 
    ->
5. Handler  
    ->
6. Middleware 3 [cache]



Middleware in echo:

e.Pre(middleware_function)

echo comes with lot of in-built middleware.

